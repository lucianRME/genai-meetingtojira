{
  "filtering": {
    "total_lines": 12,
    "kept": 12,
    "dropped": 0,
    "use_llm_classifier": false
  },
  "requirements": [
    {
      "id": "REQ-001",
      "title": "Email One-Time Code for Password Reset",
      "description": "Implement a feature that allows users to reset their password using a one-time code sent via email.",
      "acceptance_criteria": [
        "User receives a one-time code via email upon requesting a password reset.",
        "The one-time code expires after 10 minutes.",
        "User can reset password successfully using a valid one-time code."
      ],
      "priority": "High",
      "epic": "Password Reset Enhancement"
    },
    {
      "id": "REQ-002",
      "title": "OTP Verification Scenarios",
      "description": "Develop test cases for verifying the OTP functionality during password reset.",
      "acceptance_criteria": [
        "Positive test case: User successfully resets password with a valid OTP.",
        "Negative test case: User fails to reset password with an expired OTP.",
        "Negative test case: User fails to reset password with an invalid OTP."
      ],
      "priority": "High",
      "epic": "Password Reset Enhancement"
    },
    {
      "id": "REQ-003",
      "title": "Rate Limiting for Password Reset Attempts",
      "description": "Implement rate limiting to restrict the number of password reset attempts per user.",
      "acceptance_criteria": [
        "User can attempt password reset a maximum of 3 times per hour.",
        "User receives an error message after exceeding the limit.",
        "Rate limit resets after one hour."
      ],
      "priority": "Medium",
      "epic": "Password Reset Enhancement"
    },
    {
      "id": "REQ-004",
      "title": "Audit Event for Successful Password Reset",
      "description": "Log an audit event whenever a password is successfully reset.",
      "acceptance_criteria": [
        "Audit event is generated upon successful password reset.",
        "Audit event includes user ID and timestamp.",
        "Audit event is accessible in system logs."
      ],
      "priority": "Medium",
      "epic": "Password Reset Enhancement"
    }
  ],
  "test_cases": [
    {
      "requirement_id": "REQ-001",
      "scenario_type": "positive",
      "gherkin": "Scenario: User receives a one-time code via email Given a user requests a password reset When the request is submitted Then the user receives a one-time code via email",
      "tags": [
        "@positive"
      ]
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "negative",
      "gherkin": "Scenario: One-time code expires after 10 minutes Given a user receives a one-time code When 10 minutes have passed Then the one-time code is expired",
      "tags": [
        "@negative"
      ]
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "regression",
      "gherkin": "Scenario: User resets password with a valid one-time code Given a user has a valid one-time code When the user enters the code to reset the password Then the password is reset successfully",
      "tags": [
        "@regression"
      ]
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "positive",
      "gherkin": "Scenario: User successfully resets password with a valid OTP Given a user has a valid OTP When the user enters the OTP Then the password is reset successfully",
      "tags": [
        "@positive"
      ]
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "negative",
      "gherkin": "Scenario: User fails to reset password with an expired OTP Given a user has an expired OTP When the user enters the OTP Then the password reset fails",
      "tags": [
        "@negative"
      ]
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "regression",
      "gherkin": "Scenario: User fails to reset password with an invalid OTP Given a user has an invalid OTP When the user enters the OTP Then the password reset fails",
      "tags": [
        "@regression"
      ]
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "positive",
      "gherkin": "Scenario: User attempts password reset within limit Given a user attempts password reset When the attempts are within the limit of 3 per hour Then the password reset is allowed",
      "tags": [
        "@positive"
      ]
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "negative",
      "gherkin": "Scenario: User exceeds password reset attempt limit Given a user attempts password reset When the attempts exceed the limit of 3 per hour Then the user receives an error message",
      "tags": [
        "@negative"
      ]
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "regression",
      "gherkin": "Scenario: Rate limit resets after one hour Given a user has exceeded the password reset limit When one hour has passed Then the user can attempt password reset again",
      "tags": [
        "@regression"
      ]
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "positive",
      "gherkin": "Scenario: Audit event generated on successful password reset Given a user successfully resets their password When the reset is completed Then an audit event is generated",
      "tags": [
        "@positive"
      ]
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "negative",
      "gherkin": "Scenario: Audit event missing on password reset Given a user successfully resets their password When the reset is completed Then no audit event is generated",
      "tags": [
        "@negative"
      ]
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "regression",
      "gherkin": "Scenario: Audit event includes user ID and timestamp Given an audit event is generated When a password reset is successful Then the event includes user ID and timestamp",
      "tags": [
        "@regression"
      ]
    }
  ]
}