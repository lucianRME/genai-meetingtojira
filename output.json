{
  "filtering": {
    "total_lines": 12,
    "kept": 12,
    "dropped": 0,
    "use_llm_classifier": false
  },
  "requirements": [
    {
      "id": "REQ-001",
      "title": "Email One-Time Code for Password Reset",
      "description": "Enable users to reset their passwords using a one-time code sent via email.",
      "acceptance_criteria": [
        "Given a user requests a password reset, When they receive an email, Then the email contains a one-time code.",
        "Given a user enters a one-time code, When the code is valid, Then the password reset is successful.",
        "Given a user enters a one-time code, When the code is expired, Then the password reset fails."
      ],
      "priority": "High",
      "epic": "Password Reset Feature"
    },
    {
      "id": "REQ-002",
      "title": "One-Time Code Expiration",
      "description": "The one-time code sent for password reset should expire after 10 minutes.",
      "acceptance_criteria": [
        "Given a one-time code is sent, When 10 minutes have passed, Then the code is expired.",
        "Given a user enters an expired code, When attempting to reset the password, Then the reset fails.",
        "Given a user requests a new code, When the previous code is expired, Then a new code is sent."
      ],
      "priority": "High",
      "epic": "Password Reset Feature"
    },
    {
      "id": "REQ-003",
      "title": "Rate Limiting for Password Reset",
      "description": "Limit password reset attempts to a maximum of 3 per hour per user.",
      "acceptance_criteria": [
        "Given a user attempts password reset, When they exceed 3 attempts in an hour, Then further attempts are blocked.",
        "Given a user is blocked, When an hour has passed, Then they can attempt password reset again.",
        "Given a user is blocked, When they attempt a reset, Then they receive a notification of the block."
      ],
      "priority": "Medium",
      "epic": "Password Reset Feature"
    },
    {
      "id": "REQ-004",
      "title": "Audit Event for Successful Password Reset",
      "description": "An audit event should be logged when a password is successfully reset.",
      "acceptance_criteria": [
        "Given a password reset is successful, When the process completes, Then an audit event is logged.",
        "Given an audit event is logged, When reviewing logs, Then the event is visible.",
        "Given a password reset attempt, When it is unsuccessful, Then no audit event is logged."
      ],
      "priority": "Medium",
      "epic": "Password Reset Feature"
    }
  ],
  "test_cases": [
    {
      "requirement_id": "REQ-001",
      "scenario_type": "positive",
      "gherkin": "Scenario: Successful password reset with valid one-time code Given a user requests a password reset When they receive an email Then the email contains a one-time code And the user enters the valid code Then the password reset is successful",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "negative",
      "gherkin": "Scenario: Password reset fails with expired one-time code Given a user requests a password reset When they receive an email And the code is expired Then the password reset fails",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "regression",
      "gherkin": "Scenario: Email contains one-time code for password reset Given a user requests a password reset When they receive an email Then the email contains a one-time code",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "positive",
      "gherkin": "Scenario: One-time code expires after 10 minutes Given a one-time code is sent When 10 minutes have passed Then the code is expired",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "negative",
      "gherkin": "Scenario: Password reset fails with expired code Given a user enters an expired code When attempting to reset the password Then the reset fails",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "regression",
      "gherkin": "Scenario: New code sent after previous code expires Given a user requests a new code When the previous code is expired Then a new code is sent",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "positive",
      "gherkin": "Scenario: Block further attempts after 3 password reset attempts Given a user attempts password reset When they exceed 3 attempts in an hour Then further attempts are blocked",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "negative",
      "gherkin": "Scenario: Notification of block after exceeding attempts Given a user is blocked When they attempt a reset Then they receive a notification of the block",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "regression",
      "gherkin": "Scenario: User can attempt password reset after an hour Given a user is blocked When an hour has passed Then they can attempt password reset again",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "positive",
      "gherkin": "Scenario: Audit event logged for successful password reset Given a password reset is successful When the process completes Then an audit event is logged",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "negative",
      "gherkin": "Scenario: No audit event logged for unsuccessful password reset Given a password reset attempt When it is unsuccessful Then no audit event is logged",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "regression",
      "gherkin": "Scenario: Audit event visible in logs after successful reset Given an audit event is logged When reviewing logs Then the event is visible",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    }
  ]
}