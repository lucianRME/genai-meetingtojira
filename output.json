{
  "filtering": {
    "total_lines": 12,
    "kept": 12,
    "dropped": 0,
    "use_llm_classifier": false
  },
  "requirements": [
    {
      "id": "REQ-001",
      "title": "Email One-Time Code for Password Reset",
      "description": "Implement a feature allowing users to reset their password using a one-time code sent via email.",
      "acceptance_criteria": [
        "Given a user requests a password reset, when they receive an email, then the email contains a one-time code.",
        "Given a user enters a one-time code, when the code is valid and not expired, then the password reset is successful.",
        "Given a user enters a one-time code, when the code is expired or invalid, then the password reset fails."
      ],
      "priority": "High",
      "epic": "Password Reset Feature"
    },
    {
      "id": "REQ-002",
      "title": "One-Time Code Expiry",
      "description": "Ensure the one-time code sent for password reset expires after 10 minutes.",
      "acceptance_criteria": [
        "Given a one-time code is generated, when 10 minutes have passed, then the code is expired.",
        "Given a user enters a one-time code, when the code is expired, then the password reset fails.",
        "Given a user requests a new password reset, when the previous code is expired, then a new code is sent."
      ],
      "priority": "High",
      "epic": "Password Reset Feature"
    },
    {
      "id": "REQ-003",
      "title": "Rate Limiting for Password Reset",
      "description": "Implement rate limiting to allow a maximum of 3 password reset attempts per hour per user.",
      "acceptance_criteria": [
        "Given a user requests a password reset, when they have not exceeded 3 attempts in an hour, then the request is processed.",
        "Given a user requests a password reset, when they exceed 3 attempts in an hour, then the request is denied.",
        "Given a user exceeds the attempt limit, when an hour has passed, then the attempt count resets."
      ],
      "priority": "Medium",
      "epic": "Password Reset Feature"
    },
    {
      "id": "REQ-004",
      "title": "Audit Event for Successful Password Reset",
      "description": "Send an audit event whenever a password is successfully reset.",
      "acceptance_criteria": [
        "Given a password reset is successful, when the process completes, then an audit event is sent.",
        "Given an audit event is sent, when it is logged, then it is available for verification.",
        "Given a password reset attempt, when it is unsuccessful, then no audit event is sent."
      ],
      "priority": "Medium",
      "epic": "Password Reset Feature"
    }
  ],
  "test_cases": [
    {
      "requirement_id": "REQ-001",
      "scenario_type": "positive",
      "gherkin": "Scenario: Successful password reset with valid code Given a user requests a password reset When they receive an email with a one-time code Then the email contains a valid one-time code",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "negative",
      "gherkin": "Scenario: Password reset fails with expired code Given a user enters a one-time code When the code is expired Then the password reset fails",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "regression",
      "gherkin": "Scenario: Regression test for valid code usage Given a user enters a one-time code When the code is valid and not expired Then the password reset is successful",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "positive",
      "gherkin": "Scenario: One-time code expires after 10 minutes Given a one-time code is generated When 10 minutes have passed Then the code is expired",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "negative",
      "gherkin": "Scenario: Password reset fails with expired code Given a user enters a one-time code When the code is expired Then the password reset fails",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "regression",
      "gherkin": "Scenario: New code sent after previous code expires Given a user requests a new password reset When the previous code is expired Then a new code is sent",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "positive",
      "gherkin": "Scenario: Password reset request within limit Given a user requests a password reset When they have not exceeded 3 attempts in an hour Then the request is processed",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "negative",
      "gherkin": "Scenario: Password reset request denied after limit Given a user requests a password reset When they exceed 3 attempts in an hour Then the request is denied",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "regression",
      "gherkin": "Scenario: Attempt count resets after an hour Given a user exceeds the attempt limit When an hour has passed Then the attempt count resets",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "positive",
      "gherkin": "Scenario: Audit event sent for successful reset Given a password reset is successful When the process completes Then an audit event is sent",
      "tags": [
        "@positive"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "negative",
      "gherkin": "Scenario: No audit event for unsuccessful reset Given a password reset attempt When it is unsuccessful Then no audit event is sent",
      "tags": [
        "@negative"
      ],
      "gherkin_valid": true
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "regression",
      "gherkin": "Scenario: Audit event logged for verification Given an audit event is sent When it is logged Then it is available for verification",
      "tags": [
        "@regression"
      ],
      "gherkin_valid": true
    }
  ]
}