{
  "requirements": [
    {
      "id": "REQ-001",
      "title": "Email One-Time Code for Password Reset",
      "description": "Implement a feature that allows users to reset their password using a one-time code sent via email.",
      "acceptance_criteria": [
        "User receives a one-time code via email upon reset request.",
        "The one-time code expires in 10 minutes.",
        "User can reset password using the valid one-time code."
      ]
    },
    {
      "id": "REQ-002",
      "title": "OTP Verification Scenarios",
      "description": "Develop test cases for verifying the OTP functionality during password reset.",
      "acceptance_criteria": [
        "Successful OTP verification allows password reset.",
        "Expired OTP does not allow password reset.",
        "Invalid OTP does not allow password reset."
      ]
    },
    {
      "id": "REQ-003",
      "title": "Rate Limiting for Password Reset Attempts",
      "description": "Implement rate limiting to restrict the number of password reset attempts per user.",
      "acceptance_criteria": [
        "User can attempt password reset a maximum of 3 times per hour.",
        "Further attempts are blocked after 3 failed attempts within an hour.",
        "Rate limit resets after one hour from the first attempt."
      ]
    },
    {
      "id": "REQ-004",
      "title": "Audit Event for Successful Password Reset",
      "description": "Log an audit event whenever a password is successfully reset.",
      "acceptance_criteria": [
        "Audit event is generated upon successful password reset.",
        "Audit event includes timestamp and user ID.",
        "Audit logs are accessible for verification purposes."
      ]
    }
  ],
  "test_cases": [
    {
      "requirement_id": "REQ-001",
      "scenario_type": "positive",
      "gherkin": "Scenario: User receives a one-time code via email upon reset request\nGiven a registered user requests a password reset\nWhen the user submits the password reset request\nThen the user receives a one-time code via email"
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "negative",
      "gherkin": "Scenario: One-time code expires after 10 minutes\nGiven a user has received a one-time code via email\nAnd 10 minutes have passed since the code was sent\nWhen the user attempts to reset the password using the code\nThen the password reset is not allowed"
    },
    {
      "requirement_id": "REQ-001",
      "scenario_type": "regression",
      "gherkin": "Scenario: User can reset password using a valid one-time code\nGiven a user has received a valid one-time code via email\nWhen the user enters the one-time code to reset the password\nThen the password is successfully reset"
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "positive",
      "gherkin": "Scenario: Successful OTP verification allows password reset\nGiven a user has received a valid OTP\nWhen the user enters the OTP correctly\nThen the user is allowed to reset the password"
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "negative",
      "gherkin": "Scenario: Expired OTP does not allow password reset\nGiven a user has received an OTP\nAnd the OTP has expired\nWhen the user attempts to use the expired OTP\nThen the password reset is not allowed"
    },
    {
      "requirement_id": "REQ-002",
      "scenario_type": "regression",
      "gherkin": "Scenario: Invalid OTP does not allow password reset\nGiven a user has received an OTP\nWhen the user enters an invalid OTP\nThen the password reset is not allowed"
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "positive",
      "gherkin": "Scenario: User can attempt password reset a maximum of 3 times per hour\nGiven a user attempts to reset their password\nWhen the user makes 3 password reset attempts within an hour\nThen the attempts are allowed"
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "negative",
      "gherkin": "Scenario: Further attempts are blocked after 3 failed attempts within an hour\nGiven a user has made 3 failed password reset attempts within an hour\nWhen the user attempts a fourth password reset\nThen the attempt is blocked"
    },
    {
      "requirement_id": "REQ-003",
      "scenario_type": "regression",
      "gherkin": "Scenario: Rate limit resets after one hour from the first attempt\nGiven a user has made 3 password reset attempts\nAnd one hour has passed since the first attempt\nWhen the user attempts another password reset\nThen the attempt is allowed"
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "positive",
      "gherkin": "Scenario: Audit event is generated upon successful password reset\nGiven a user successfully resets their password\nWhen the password reset is completed\nThen an audit event is generated"
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "negative",
      "gherkin": "Scenario: Audit event includes timestamp and user ID\nGiven a user successfully resets their password\nWhen the audit event is generated\nThen the event includes a timestamp and user ID"
    },
    {
      "requirement_id": "REQ-004",
      "scenario_type": "regression",
      "gherkin": "Scenario: Audit logs are accessible for verification purposes\nGiven an audit event is generated for a password reset\nWhen an admin accesses the audit logs\nThen the logs are accessible and include the event"
    }
  ]
}